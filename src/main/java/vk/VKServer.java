package vk;

import com.vk.api.sdk.exceptions.ApiException;
import com.vk.api.sdk.exceptions.ClientException;
import com.vk.api.sdk.objects.messages.Message;
import model.User;
import model.Word;

import java.util.HashMap;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Executors;

public class VKServer {
    public static VKCore vkCore;
    public static List<Word> allWords = Arrays.asList(
        new Word("–ø–æ–∑–≤–æ–ª—è—Ç—å","allow"),
        new Word("—è–±–ª–æ–∫–æ","apple"),
        new Word("–º–∞—à–∏–Ω–∞","car"),
        new Word("–Ω–µ–±–æ","sky"),
        new Word("–º–æ—Ä–µ","sea"),
        new Word("–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫","orange juice"),
        new Word("–∫–æ—Å–º–æ—Å","space"),
        new Word("–º–∏—Ä","peace"),
        new Word("–¥–æ–±—Ä—ã–π","kind"),
        new Word("–º–æ—á—å","can"),
        new Word("—É–±–æ—Ä–∫–∞","clear"),
        new Word("–∏–≥—Ä–∞","game"),
        new Word("–¥–∏—Å–∫—É—Å–∏—è","discussion"),
        new Word("–¥–æ–ª–∏–Ω–∞","valley"),
        new Word("–∏–∑—É–º—Ä—É–¥","emerald"),
        new Word("–∫–æ–ª–æ–∫–æ–ª","bell"),
        new Word("–ª–æ–∂—å","lie"),
        new Word("–ª—è–≥—É—à–∫–∞","frog"),
        new Word("–º–∞–≥–∞–∑–∏–Ω","shop"),
        new Word("–º–∞—Ä–∫—Å–∏–∑–º","–úarxism"),
        new Word("–º–∞—Ä—à","march"),
        new Word("–Ω–æ–∫–∞—É—Ç","knock-out"),
        new Word("–Ω–æ—á—å","night"),
        new Word("–æ–±–µ–∑—å—è–Ω–∞","monkey"),
        new Word("–ø–µ–π–∑–∞–∂","landscape"),
        new Word("—Ñ–∏–ª—å–º","film"),
        new Word("–ø–µ—Ä–≤—ã–π","first"),
        new Word("–∫–æ—Ä–æ–ª—å","king"),
        new Word("—à–∫–æ–ª–∞","school"),
        new Word("—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç","university"),
        new Word("–ø–µ—á–∞–ª—å","sad"),
        new Word("–ø–µ—Ä—Å–∏–∫","peach"),
        new Word("–ø–∏—Å—å–º–æ","letter"),
        new Word("–ø–∏–ª—é–ª—è","pill"),
        new Word("–ø–æ–ª—è—Ä–Ω—ã–π","–∞rctic"),
        new Word("—Å–µ—Å—Ç—Ä–∞","sister"),
        new Word("—Å–µ—Ç—å","net"),
        new Word("—Å–∏–ª—å–Ω—ã–π","strong"),
        new Word("—Å–ø–æ—Ä—Ç—Å–º–µ–Ω","sportsman")
    );

    public static HashMap<Integer, User> userData = new HashMap<>();
    static {
        try{
            vkCore = new VKCore();

        }catch(ApiException | ClientException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws Exception {
        System.out.println("Running server...");

        while (true) {
            Thread.sleep(300);
            try {
                Message msg = vkCore.getMessage();
                if (msg != null && (!msg.getText().isEmpty())) {
                    Executors.newCachedThreadPool().execute(() -> sendMessage(getReplyMessage(msg), msg.getPeerId(), msg.getRandomId()));
                }
            } catch (ClientException e) {
                System.out.println("Try to reconnect...");
                Thread.sleep(10000);
            }
        }
    }

    public static String getReplyMessage(Message msg) {
        String userMessageText = msg.getText();
        int userId = msg.getPeerId();
        User data = userData.getOrDefault(userId, null);
        if (data == null) {
            data = new User(userId);
            userData.put(userId, data);

        }

        String  replyMessage;

        if(data.isTranslating()){
            if (data.currentWord.rus.equalsIgnoreCase(userMessageText)){
                data.totalCorrectAnswer++;
                replyMessage = "–í–µ—Ä–Ω–æ! " + System.lineSeparator();
            } else{
                data.totalWrongAnswer++;
                replyMessage = "–¢—ã –æ—à–∏–±—Å—è " + System.lineSeparator();
            }
            replyMessage += "–°–ª–æ–≤–æ: " + data.currentWord.eng + " –ü–µ—Ä–µ–≤–æ–¥:" + data.currentWord.rus;
            data.answerWords.add(data.currentWord);
            data.currentWord = null;

        }else if(userMessageText.equalsIgnoreCase("word")){
            Word translateWord = null;
            for (Word word: allWords){
                if(!data.answerWords.contains(word)){
                    translateWord = word;
                    break;
                }
            }
            if(translateWord == null) {
                replyMessage = "–¢—ã –£–º—É–¥—Ä–∏–ª—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å—ë! ";

            } else {
                data.currentWord = translateWord;
                replyMessage = " –ü–µ—Ä–µ–≤–µ–¥–∏-–∫–∞... " + translateWord.eng;
            }
        } else if(userMessageText.equalsIgnoreCase("My score")) {
            replyMessage = "‚úÖ - " + data.totalCorrectAnswer + System.lineSeparator() +
                    "‚ö†‚ö†‚ö† " + data.totalWrongAnswer + System.lineSeparator() + " ‚ö†‚ö†‚ö†";
        } else {
            replyMessage = "–¢–∞–∞–∫–∏—Ö –ø—Ä–∏–∫–æ–ª–æ–≤ —è –µ—â—ë –Ω–µ –≤–∏–¥–µ–ªü§®ü§®ü§®   '"+userMessageText+"'";
        }
        return replyMessage;

    }

    public static void sendMessage(String messageText, int userId, int randomId) {
        try {
            vkCore.vk.messages()
                    .send(vkCore.actor)
                    .userId(userId)
                    .randomId(randomId)
                    .message(messageText)
                    .execute();
        } catch (ApiException | ClientException e) {
            e.printStackTrace();
        }
    }

}
